import java.awt.Dimension;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

import processing.core.*;


import edu.uci.ics.jung.algorithms.layout.SpringLayout;
import edu.uci.ics.jung.graph.Graph;
import edu.uci.ics.jung.graph.UndirectedSparseGraph;


public class Test extends PApplet {
    public Node testNode;
	public ArrayList<Node> nodes;
	public ArrayList<Edge> edges;
    public Slider timeSlider;
    public Graph graph;
    public SpringLayout<Node,Edge> layout;
    
    
/**Initialize the view, draw the visualization
   * */
public void setup() {
    size(500,500);
    background(0);   
   
    this.graph = new UndirectedSparseGraph<Node,Edge>();
    readLesMis();
    this.layout = new SpringLayout <Node,Edge>(this.graph);
    this.layout.setSize(new Dimension(100,100));    
    saveNodePositions();
    
    for (int i = 0;i<this.nodes.size();i++){
    	this.nodes.get(i).display();    	
    }
    
    for (int i = 0;i<this.edges.size();i++){
    	this.edges.get(i).display(this.nodes);    	
    }
    
	ArrayList <String> testLabels = new ArrayList <String>();
    testLabels.add("0");
    testLabels.add("1");
    testLabels.add("2");
    testLabels.add("3");
    testLabels.add("4");
    
    this.timeSlider = new Slider(this,testLabels,50);
    this.timeSlider.drawSlider();
  }
 
  /**Re-draw the view
  * */
  public void draw() {
    stroke(255);    
   // testNode.mouseClicked();     
    timeSlider.drag(mouseX);
    timeSlider.redrawTick();
  }
  
  /**Responds to a mouse down event on the canvas
   * */
  public void mousePressed(){	  
	  timeSlider.selectTick(mouseX,mouseY);
  }
  
  /**Responds to a mouse up event on the canvas
   * */
  public void mouseReleased(){	 	  
      timeSlider.releaseTick();	  
  }  
  
  
  /**Creates a test data set of nodes and edges 
   * Saves the nodes and edges into global variables
   */
  public void generateTestNodes(){
	 /**this.nodes = new ArrayList<Node>();
	 this.edges = new ArrayList <Edge>();
	 
	 for (int i=0;i<10;i++){
		 this.nodes.add(new Node (this,i,""));
	 }
	
	 
	 this.edges.add(new Edge (this,0,0,1));
	 this.edges.add(new Edge (this,1,0,3));
	 this.edges.add(new Edge (this,2,4,5));
	 this.edges.add(new Edge (this,3,6,8));	*/
  }
  /**Saves the node positions generated by a graph layout in a global
   * variable
   * */
  public void saveNodePositions(){
	  Node currentNode;
	  for (int i=0;i<this.nodes.size();i++){
		  currentNode = this.nodes.get(i);
		  currentNode.x = (float) this.layout.getX(currentNode);
		  currentNode.y = (float) this.layout.getY(currentNode);
		  this.nodes.set(i, currentNode);
	  }
	  System.out.println(this.layout.transform(this.nodes.get(0)));
  }
  /**Reads the text file containing the data of the co-occurrence network in Les Miserables
   * Saves the nodes and edges into global variables
   * */
  public void readLesMis(){
	  String filename = "lesmisShort.txt";
	  Scanner scan;
	  int type = 0;
	  int edgeCounter = 0;
	  int node1, node2;
	  Edge newEdge;
	  this.nodes = new ArrayList<Node>();
	  this.edges = new ArrayList <Edge>();
	  
	  try {
			scan = new Scanner(new File(filename));
			while(scan.hasNext())
			{
				// Get the credit hours and quality points and
	            // determine if the student is on warning. If so,
	            // write the student data to the output file.
				String line;
				line = scan.nextLine();
				String[] items = line.split(" ");
				if (items[0].equals("node")){
					type = 0;
				}else if (items[0].equals("edge")){
					type = 1;
				}else{
					if (type==0){ //Create a node
						this.nodes.add(new Node(this,Integer.parseInt(items[0]),items[1]));						
					}else{ //Create an edge						
						node1 = Integer.parseInt(items[0]);
						node2 = Integer.parseInt(items[1]);
						newEdge = new Edge (this,edgeCounter,node1,node2);
						this.graph.addEdge(newEdge,this.nodes.get(node1),this.nodes.get(node2));
						this.edges.add(newEdge);
						edgeCounter++;
					}
				}				
			}			
			
		} catch (FileNotFoundException e) {			
			e.printStackTrace();
		}
  }
}

