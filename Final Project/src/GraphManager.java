import java.awt.Dimension;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

import processing.core.PApplet;

import edu.uci.ics.jung.algorithms.layout.SpringLayout;
import edu.uci.ics.jung.graph.Graph;
import edu.uci.ics.jung.graph.UndirectedSparseGraph;
/**Creates a graph and layout using the JUNg framework
 * */
public class GraphManager {
	 public Graph graph;
	 public SpringLayout<Integer,Edge> layout;
	 public ArrayList<Node> nodes;
     public ArrayList<ArrayList<Edge>> edges;
     PApplet parent;
     
     public GraphManager(PApplet p){
    	 this.parent = p;
    	 this.graph = new UndirectedSparseGraph<Integer,Edge>();  
    	// readLesMis();
    	 readVanDeBunt();
    	 this.layout = new SpringLayout <Integer,Edge>(this.graph);
         this.layout.setSize(new Dimension(700,700));    
         saveNodePositions();
     }
     
     /**Reads the text file containing the data of the co-occurrence network in Les Miserables
      * Saves the nodes and edges into global variables
      * */
     public void readLesMis(){
   	  String filename = "lesmisShort.txt";   
 	  Scanner scan;
 	  int type = 0;
 	  int edgeCounter = 0;
 	  int node1, node2,newNode;
 	  Edge newEdge;
 	 
 	  this.nodes = new ArrayList<Node>();
 	  this.edges = new ArrayList <ArrayList<Edge>>();
 	  
 	  try {
 			scan = new Scanner(new File(filename));
 			while(scan.hasNext())
 			{   				
 				String line;
 				line = scan.nextLine();
 				String[] items = line.split(" ");
 				if (items[0].equals("node")){
 					type = 0;
 				}else if (items[0].equals("edge")){
 					type = 1;
 				}else{
 					if (type==0){ //Create a node   
 						newNode = Integer.parseInt(items[0]);
 						this.nodes.add(new Node(this.parent,newNode,items[1]));	
 						this.graph.addVertex(newNode);
 					}else{ //Create an edge						
 						node1 = Integer.parseInt(items[0]);
 						node2 = Integer.parseInt(items[1]);
 						newEdge = new Edge (this.parent,edgeCounter,node1,node2);
 						this.graph.addEdge(newEdge,node1,node2);
 						this.edges.get(0).add(newEdge);
 						edgeCounter++;
 					}
 				}				
 			}			
 			
 		} catch (FileNotFoundException e) {			
 			e.printStackTrace();
 		}
     }
     /**Saves the node positions generated by a graph layout in a class
      * variable
      * */
     public void saveNodePositions(){
	   	  Node currentNode;
	   	  for (int i=0;i<this.nodes.size();i++){
	   		  currentNode = this.nodes.get(i);
	   		  currentNode.x = (float) this.layout.getX(i);
	   		  currentNode.y = (float) this.layout.getY(i);
	   		  this.nodes.set(i, currentNode);
	   	  }   	  
     }
     /**Calls the display function for all nodes and edges, which will
      * render them onto the screen
      * */
     public void drawGraph(){
    	 for (int i = 0;i<this.nodes.size();i++){
    	     	this.nodes.get(i).display();    	
    	  }
    	  
    	 //for (int col = 0;col<this.edges.size();col++){
    		 //if (this.edges.get(col)!= null){
    			 for (int row = 0;row<this.edges.get(1).size();row++){   	  	    	   
    	  	           this.edges.get(1).get(row).display(this.nodes);    	  	    	        	   	
    	  	     }
    		// }    		
    	 //}
	    
     }
     /**Creates a test data set of nodes and edges 
      * Saves the nodes and edges into global variables
      
     public void generateTestNodes(){
	   	 this.nodes = new ArrayList<Node>();
	   	 this.edges = new ArrayList <Edge>();
	   	 
	   	 for (int i=0;i<10;i++){
	   		 this.nodes.add(new Node (this,i,""));
	   	 }
	   	
	   	 
	   	 this.edges.add(new Edge (this,0,0,1));
	   	 this.edges.add(new Edge (this,1,0,3));
	   	 this.edges.add(new Edge (this,2,4,5));
	   	 this.edges.add(new Edge (this,3,6,8));	
     }*/
    
     /**Reads the text file containing time-varying data of undergraduate student's friendship
      * Originally used in an experiment by Van De Bunt (1999)
      * */
     public void readVanDeBunt(){
    	  String filename = "vanDeBunt_all.txt";
       	  Scanner scan;
       	  int time = 0;
       	  int nodeCounter = 0;
       	  int edgeCounter = 0;
       	  int node1, node2,newNode;
       	  Edge newEdge;
       	 
       	  this.nodes = new ArrayList<Node>();
       	  this.edges = new ArrayList <ArrayList<Edge>>();
       	  
       	  try {
       			scan = new Scanner(new File(filename));
       			while(scan.hasNext())
       			{   				
       				String line;
       				line = scan.nextLine();
       				String[] items = line.split(" ");
       				if (items[0].equals("time")){
       					time = Integer.parseInt(items[1]);
       					nodeCounter = 0;  
       					this.edges.add(new ArrayList <Edge>());
       				}else{
       					if (time==0){ //The first time stamp, create all 32 nodes        						
       						this.nodes.add(new Node(this.parent,nodeCounter,""));	
       						this.graph.addVertex(nodeCounter);       						
       					}
       					//Find the edges for each time stamp					
       					parseLine_vanDeBunt(nodeCounter,time,items);       					
       					nodeCounter++;       					
       				}				
       			}	       			
       		} catch (FileNotFoundException e) {			
       			e.printStackTrace();
       		}   	  
     }
     /**Parses one line of the van de bunt data set and sets the edges
      * */
    public void parseLine_vanDeBunt(int nodeNumber, int time, String [] line){
    	Edge newEdge;
    	for (int i=0;i<line.length;i++){
    		int relation = Integer.parseInt(line[i]);      		
    		if (i!= nodeNumber  &&(relation == 1 || relation==2)){ //Only consider best friend or friend relations as a connection     			
    			newEdge = new Edge (this.parent,0,i,nodeNumber);
    			this.graph.addEdge(newEdge,i,nodeNumber);
    			this.edges.get(time).add(newEdge);    		   
    		}
    	}    	
    }
	 
}
